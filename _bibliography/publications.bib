@inproceedings{Rodriguez2024,
	title = {Ten Years of {SARL:} What's Next?},
	author = {Rodriguez, Sebastian and Galland, St{\'{e}}phane and Gaud, Nicolas},
	year = 2024,
	month = aug,
	url = {https://euramas.github.io/eumas2024/},
	abstract = {SARL is a versatile general-purpose agent-oriented programming language designed to offer fundamental abstractions for agent-oriented programming (AOP) while remaining agnostic to specific agent architectures. Its robust features empower developers to implement a diverse range of agent models and distributed interaction schemes, catering to various domain-specific requirements. On the occasion of its 10th anniversary, we review the key concepts and features of SARL. We highlight its exibility by showcasing significant extensions and practical use cases. We also explore SARL's approach to addressing new AOP requirements and discuss the future directions of the language},
	keywords = {SARL; Agent Oriented Programming; Agent Oriented Software Engineering},
	_language = {ENGLISH},
	_publication_type = {INTERNATIONAL_ORAL_COMMUNICATION},
	_publication_type_name = {Oral Communications without proceeding in international conference},
	_publication_category = {C_COM},
	_publication_category_name = {Oral Communications without proceeding in international or national conference},
	booktitle = {21th European Conference on Multiagent Systems (EUMAS-24)},
	editor = {Ricci, Alessandro and Collier, Rem},
	address = {Dublin, Ireland},
	_core_ranking = {C},
	publisher = {EURaMAS},
	note = {CORE Ranking: C}
}

@InProceedings{paams23,
author={Baldoni, Matteo and Baroglio, Cristina and Micalizio, Roberto and Tedeschi, Stefano},
editor={Mathieu, Philippe and Dignum, Frank and Novais, Paulo and De la Prieta, Fernando},
title="Towards Exception Handling in the SARL Agent Platform",
booktitle="Advances in Practical Applications of Agents, Multi-Agent Systems, and Cognitive Mimetics. The PAAMS Collection",
year="2023",
publisher="Springer Nature Switzerland",
address="Cham",
pages="403--408",
abstract="We demonstrate how exception handling can be realized in the SARL agent platform. We see exception handling as a mechanism binding some agents, entitled to raise given exceptions, to the ones entitled to handle them. To this end, we define dedicated exception spaces through which defining the agents' behavior in presence of exceptions.",
isbn="978-3-031-37616-0"
}

@inproceedings{sarl23,
	title = {Automatic Detection of Pure Actions within the {SARL} {Agent-Programming} Language},
	author = {Galland, St{\'{e}}phane and Gaud, Nicolas},
	year = 2023,
	month = mar,
	doi = {10.1016/j.procs.2023.03.150},
	abstract = {In computer programming, a pure function is a function that has no side-effects. Pure actions, which are assimilated to pure functions, play an important role within the SARL agent-programming language. Indeed, several constructs of the language, e.g. the guard conditions of the event handlers, cannot contain calls to unpure actions. In many existing languages, the purity of the action is declared by the developer, who could put a marker on the action in some languages, or simply implicit. The contribution of this paper is an algorithm to automatically determine if an action is pure in order to allow the SARL compiler to mark the actions as pure for the developer. The proposed algorithm is successfully implemented in the SARL compiler.},
	keywords = {Function Purity; Agent Action; Programming Language; SARL},
	_language = {ENGLISH},
	_publication_type = {INTERNATIONAL_CONFERENCE_PAPER},
	_publication_type_name = {Papers in the proceedings of an international conference},
	_publication_category = {C_ACTI},
	_publication_category_name = {Papers in the proceedings of an international conference},
	booktitle = {7th International Workshop on Agent-based Modeling and Applications with SARL (SARL-23), in International Conference on Ambient Systems, Networks and Technologies (ANT-23)},
	volume = {220},
	pages = {1071--1076},
	series = {Procedia Computer Science},
	address = {Leuven, Belgium},
	publisher = {Elsevier}
}

@Inproceedings{sarl2022,
	abstract = {Exception handling has been successfully proposed in software engineering practice as a simple, but effective, technology to address abnormal situations possibly occurring at runtime. Such mechanisms support the robust composition of heterogeneous software components, promoting code modularity, decoupling, and separation of concerns. Multi-agent systems bring these features to an extreme, but often lack systematic mechanisms for treating exceptions as part of their design. In this paper, we show how exception handling mechanism can be introduced in SARL, leveraging the abstractions that characterize its programming model. We introduce a new kind of space, supporting the responsibility distribution among agents concerning the handling of exceptional situations.}, 
	keywords = {Exception Handling; Responsibility; Software Composition; Robustness; SARL}, 
	publisher = {Elsevier}, 
	address = {Porto, Portugal},
	booktitle = {6th International Workshop on Agent-based Modeling and Applications with SARL (SARL)}, 
	month = mar, 
	year = {2022}, 
	title = {Exception Handling in SARL as a Responsibility Distribution}, 
	author = {Baldoni, Matteo and Baroglio, Cristina and Chiappino, Giovanni and Micalizio, Roberto and Tedeschi, Stefano}, 
}

@Inproceedings{emas2020,
	abstract = {SARL is a general-purpose agent-oriented programming language. This language aims at providing the fundamental abstractions for dealing with concurrency, distribution, interaction, decentralization, reactivity, autonomy and dynamic reconfiguration that are usually considered essential for implementing agent-based applications. Every programming language specifies an execution model. In the case of SARL, this execution model is defined based on the object- oriented paradigm, i.e. the run-time environment is written in Java. Accordingly, and by default, the SARL programs are transformed into their equivalent object- oriented programs written in Java. The goal of this paper is twofold. Firstly, to explain the mapping between the agent-oriented paradigm and the object-oriented paradigm. Secondly, to define transformations from the SARL constructs to the Java constructs. We advocate that these goals enable the SARL developers to understand the SARL statements, and the mapping to the equivalent executable entities.},
	booktitle = {Special IJ-AOSE track of the 8th International Workshop on Engineering Multi-Agent Systems (EMAS 2020)},
	keywords = {Agent-Oriented Paradigm; Object-Oriented Paradigm; Language Transformation; SARL; Java},
	editor = {Baroglio, Cristina and H\"ubner, Jomi Fred and Winikoff, Michael},
	month = may,
	year = 2020,
	address = {Auckland, New Zealand},
	title = {Model Transformations from the SARL Agent-Oriented Programming Language to an Object-Oriented Programming Language},
	author = {GALLAND, St\'ephane and MUALLA, Yazan and ZHAO, Hui and RODRIGUEZ, Sebastian and NAJJAR, Amro and GAUD, Nicolas},
}

@Article{ijaose2019,
	abstract = {SARL is a general-purpose agent-oriented programming language. This language aims at providing the fundamental abstractions for dealing with concurrency, distribution, interaction, decentralization, reactivity, autonomy and dynamic reconfiguration that are usually considered essential for implementing agent-based applications. Every programming language specifies an execution model. In the case of SARL, this execution model is defined based on the object- oriented paradigm, i.e. the run-time environment is written in Java. Accordingly, and by default, the SARL programs are transformed into their equivalent object- oriented programs written in Java. The goal of this paper is twofold. Firstly, to explain the mapping between the agent-oriented paradigm and the object-oriented paradigm. Secondly, to define transformations from the SARL constructs to the Java constructs. We advocate that these goals enable the SARL developers to understand the SARL statements, and the mapping to the equivalent executable entities.},
	issn = {0974-0635},
	journal = {International Journal on Agent-Oriented Software Engineering},
	keywords = {Agent-Oriented Paradigm; Object-Oriented Paradigm; Language Transformation; SARL; Java},
	month = dec,
	note = {Rank: Q2},
	doi = {10.1504/IJAOSE.2019.106458},
	volume = {1--38},
	year = 2019,
	title = {Model Transformations from the SARL Agent-Oriented Programming Language to an Object-Oriented Programming Language},
	author = {GALLAND, St\'ephane and MUALLA, Yazan and TCHAPPI HAMAN, Igor and ZHAO, Hui and RODRIGUEZ, Sebastian and NAJJAR, Amro and GAUD, Nicolas},
}

@Article{ijai2019,
	abstract = {As a general-purpose agent-oriented programming language, SARL aims at providing the fundamental abstractions that are usually considered as essential for implementing agent-based applications. Every programming language specifies an execution model. In the case of SARL, this execution model is defined based upon the object-oriented paradigm, i.e. a Java-based run-time environment. The goal of this paper is the explanation of the mapping between the agent paradigm and the object-oriented paradigm, and the definition of transformations from the SARL constructs to the object-oriented constructs. They enable the SARL developer understanding the SARL statements, and the mapping to executable entities.},
	issn = {0974-0635},
	journal = {International Journal of Artificial Intelligence},
	keywords = {Agent-oriented Paradigm; Object-oriented Paradigm; Language Transformation; SARL},
	month = oct,
	note = {Rank: Q2},
	number = {2},
	pages = {139-153},
	publisher = {Centre for Environment {\&} Socio-Economic Research Publication},
	url = {http://ceser.in/ceserp/index.php/ijai/article/view/6259},
	volume = {17},
	year = 2019,
	title = {Semantic Transformation from {SARL} Agent-oriented Statements to Java Object-oriented Statements},
	author = {Galland, St{\'e}phane and Rodriguez, Sebastian},
}

@Inproceedings{misc2018,
	abstract = {SARL is a general-purpose agent-oriented program- ming language. This language aims at providing the fundamental abstractions for dealing with concurrency, distribution, interac- tion, decentralization, reactivity, autonomy and dynamic reconfig- uration that are usually considered as essential for implementing agent- based applications. Every programming language specifies an execution model. In the case of SARL, this execution model is defined based upon the object-oriented paradigm, e.g. a run-time environment written with Java. Accordingly, and by default, the SARL programs are transformed into their equivalent object- oriented programs. The goal of this paper is the explanation of the mapping between the agent paradigm and the object- oriented paradigm, and the definition of transformations from the SARL constructs to the standard object-oriented constructs. They enable the SARL developer understanding the SARL statements, and the mapping to executable entities. The transformations in this paper could also serve as the basis for creating a compiler ex- tension for targeting any object-oriented programming language.},
	address = {Rabat, Morocco},
	booktitle = {International Conference on Modern Intelligent Systems Concepts},
	keywords = {Agent-oriented Paradigm; Paradigm; Language Transformation; SARL Object-oriented},
	language = {english},
	month = dec,
	year = 2018,
	title = {Transformations from the {SARL} agent-oriented language to the Java object-oriented language},
	author = {Galland, St{\'e}phane and Rodriguez, Sebastian},
}

@Inproceedings{pcs2018,
	abstract = {Recently, the applications of Unmanned Aerial Vehicles (UAVs) in aerial transportation are gaining more interest. Due to operational costs, safety concerns and legal regulations, agent- based simulation frameworks are preferably used to implement models and conduct tests. With the abundance of such frameworks, this paper introduces a methodology to compare the most widely used frameworks. The methodology is based on the ISO software quality model, and uses a weighted sum scoring system to give points to the frameworks understudy. The used criteria in the methodology consider agent- based simulation features and adapt specific features of unmanned aerial transportation. Preliminary comparison results and recommendations are provided and discussed.},
	booktitle = {Procedia Computer Science},
	doi = {10.1016/j.procs.2018.04.137},
	keywords = {Agent-based Simulation, Unmanned Aerial Vehicles, Unmanned Aerial Transportation, Software Quality Model, Frameworks Comparison},
	language = {english},
	month = may,
	pages = {791-796},
	publisher = {Elsevier},
	url = {https://www.sciencedirect.com/science/article/pii/S187705091830499X},
	year = 2018,
	title = {Comparison of Agent-based Simulation Frameworks for Unmanned Aerial Transportation Applications},
	author = {Mualla, Yazan and Bai, Wenshuai and Galland, St{\'e}phane and Nicolle, Christophe},
}

@Article{fgcs2017,
	abstract = {SARL is a general-purpose agent-oriented programming language. This language aims at providing the fundamental abstractions for dealing with concurrency, distribution, interaction, decentralization, reactivity, autonomy and dynamic reconfiguration that are usually considered as essential for implementing agent-based applications. Every programming language specifies an execution model. For SARL, this run-time model is supported by a SARL run- time environment. The goals of this paper are to highlight the key principles for creating a SARL run-time environment, and its concrete implementation into the Janus agent platform.},
	doi = {10.1016/j.future.2017.10.020},
	issn = {0167-739X},
	journal = {International Journal on Future Generation Computer Systems},
	keywords = {SARL agent-programming language, Run-time Environment, Janus platform},
	language = {english},
	month = oct,
	publisher = {Elsevier},
	year = 2020,
	title = {Run-time Environment for the {SARL} Agent-Programming Language: the Example of the Janus platform},
	author = {Galland, St{\'e}phane and Rodriguez, Sebastian and Gaud, Nicolas},
}

@Inproceedings{mobispc17,
	abstract = {The performance evaluation of an agent platform is central in the agent-based modeling field. This performance is influenced by the agent platform modules, and by the hardware and operating system modules, including any virtual machine. The impact of these hardware and operating system modules should be understood and evaluated due to there high impact on the global performances. In this paper, we propose the scoring approach, named SARL Experience Index in order to evaluate these two components. The score is based on CPU, memory and disk sub-scores. We advocate this score may be helpful for the agent platform users for determining quickly the positive or negative impacts of a new deployment platform for an agent framework.},
	address = {Leuven, Belgium},
	booktitle = {the 14th International Conference on Mobile Systems and Pervasive Computing (MobiSPC 2017)},
	keywords = {Agent platform, Evaluation, Platform Independent, SARL},
	language = {english},
	month = jul,
	publisher = {Elsevier},
	year = 2017,
	title = {Helping the Performance Evaluation of an Agent Run-time Framework: the {SARL} Experience Index},
	author = {Galland, St{\'e}phane and Yasar, Ansar-ul-haque and Shakshuki, Elhadi and Gaud, Nicolas},
    pages = {159--166},
	doi = {10.1016/j.procs.2017.06.073},
}

@Inproceedings{paams17,
	abstract = {Synchronization mechanism is a key component of an agent-based simulation model and platform. Conservative and optimistic models were proposed in the domain of distributed and parallel simulation. However, the SARL agent-programming language is not equipped with specific simulation features, including synchronization mechanisms. The goal of this paper is to propose a conservative synchronization model for the SARL language and its run-time platform Janus.},
	booktitle = {the 15th International Conference on Practical Applications of Agents and Multi-Agent Systems},
	keywords = {Multi-agent simulation, Conservative Event Synchroniza- tion, SARL agent programming language, Janus platform},
	language = {english},
	month = jun,
	publisher = {Springer},
	year = 2017,
	title = {Addressing the Challenges of Conservative Event Synchronization for the {SARL} Agent-Programming Language},
	author = {Cich, Glenn and Galland, St{\'e}phane and Knapen, Luk and Yasar, Ansar-ul-haque and Bellemans, Tom and Janssens, Davy},
}

@Inproceedings{sarlws17,
	abstract = {This paper proposes a first comparison of different agent-oriented programming languages, including the SARL agent-programming language. The study of those tools is based upon various criteria that are defining the essential aspects of multi-agent systems. For the sake of clarity, the comparative study is presented in a tabular form, including the languages and all the criteria. For each criterion, a definition is made to understand its meaning. At the end of the article, all the languages will be described in order to define their advantages and disadvantages.},
	booktitle = {International Workshop on Agent-based Modeling and Applications with SARL (SARL 2017)},
	keywords = {Multi-Agent System, Programming Language, Language Comparison, SARL},
	language = {english},
	month = may,
	publisher = {Elsevier},
	year = 2017,
	title = {First Comparison of {SARL} to Other Agent-Programming Languages and Frameworks},
	author = {Feraud, Maxime and Galland, St{\'e}phane},
}

@Techreport{mpm4cps015,
	author = {Florin Leon, Marcin Paprzycki, Maria Ganzha},
	title = {A Review of Agent Platforms},
	number = {{ICT COST Action IC1404}},
	institution = {Faculty of Automatic Control and Computer Engineering "Gheorghe Asachi" Technical University of Iasi, Romania; Systems Research Institute Polish Academy of Sciences, Poland},
	month = nov,
	year = 2015,
	url = {http://florinleon.byethost24.com/cost_ic1404/agent_platforms.htm?ckattempt=2},
	abstract = {This work has been performed within the ICT COST Action IC1404, Multi-Paradigm Modelling for Cyber-Physical Systems (MPM4CPS).},
}

@Inproceedings{harms2015,
	abstract = {The environment is now considered as a first class abstraction in multiagent systems. However, the boundary between real and simulated environment and the application logic is not so well defined. Depending on applications, the environment as a space shared between agents may integrate physical, communication or social dimensions where agents interact. In this paper, authors introduce a new view for structuring the notion of environment in a multiagent systems using the fundamental concepts provided by the SARL programming language.},
	address = {Belfort, France},
	booktitle = {International Workshop on Communication for Humans, Agents, Robots, Machines and Sensors},
	doi = {10.1016/j.procs.2015.07.246},
	issn = {1877-0509},
	keywords = {Multiagent systems, Environment, Interaction, Programming language},
	month = aug,
	note = {Best Paper Award},
	organization = {Procedia Computer Science},
	pages = {526--531},
	publisher = {Elsevier},
	year = 2015,
	title = {A New Perspective on Multi-Agent Environment with {SARL}},
	author = {Rodriguez, Sebastian and Galland, St{\'e}phane and Gaud, Nicolas},
}

@Inproceedings{aamas2015,
	abstract = {The environment, as a space shared between agents, is a key component of multiagent systems (MAS). Depending on systems, this space may integrate physical, communication or social dimensions. Each of them has its own process and rules to support agents' interaction. For instance, in the physical dimension, the rules may be based on the agents' location. The agents' interaction is then contextualized and the environment allows a multiagent control since it performs the interactions according to the state and rules of the MAS. The dimensions of the environment are generally connected either in an application dependent adhoc way outside of the agents or within each agent. In order to ensure a multiagent control, the relations between dimensions must be explicit outside of the agents. Using these relations between the environment dimensions, the interaction becomes also multi-dimensional. In this paper we propose to formalize rules and mechanisms to make this connection outside of the agents and in a generic way.},
	address = {Istanbul, Turkey},
	booktitle = {Autonomous Agents and Multiagent Systems (AAMAS15)},
	editor = {Bordini, Rafael and Elkind, Edith},
	keywords = {Agent-based simulation::Complex systems; Agent- based simulation::Simulation techniques, tools and environments},
	language = {english},
	month = may,
	year = 2015,
	title = {A multidimensional environment implementation for enhancing agent interaction},
	author = {Galland, St{\'e}phane and Balbo, Flavien and Gaud, Nicolas and Rodriguez, Sebastian and Picard, Gauthier and Boissier, Olivier},
}

@Inproceedings{paams2015,
	abstract = {The environment, as a space shared between agents, is a key component of multiagent systems (MAS). Depending on systems, this space may integrate physical, communication or social dimensions. Each of them has its own process and rules to support agents' interaction. The dimensions of the environment are generally connected either outside of the agents or within each agent, according to the target application. In order to ensure a multiagent control, the relations between dimensions must be explicit outside of the agents. Using these relations between the environment dimensions, the interaction becomes also multi-dimensional. In this paper, rules and mechanisms to make this connection outside of the agents are formalized. The model connects the physical and social dimensions to realize contextualized interactions. It is implemented using the SARL multiagent programming language, and illustrated with an urban traffic simulation.},
	booktitle = {13th International Conference on Practical Applications of Agents and Multi-Agent Systems (PAAMS)},
	editor = {Demazeau, Yves and Decker, Keith},
	keywords = {Environment modeling; Simulation; Programming languages for agents and multi-agent systems; Smart cities},
	language = {english},
	month = jun,
	year = 2015,
	title = {Contextualize Agent Interactions by Combining Social and Physical Dimensions in the Environment},
	author = {Galland, St{\'e}phane and Balbo, Flavien and Gaud, Nicolas and Rodriguez, Sebastian and Picard, Gauthier and Boissier, Olivier},
}


@INPROCEEDINGS{jfsma2014,
     author = {Galland, St\'ephane and Gaud, Nicolas and Rodriguez, Sebastian and Balbo, Flavien and Picard, Gauthier and Boissier, Olivier},
   keywords = {Environnement support \`a l'interaction, Environnement physique, Environnement Social, Langage de programmation, Trafic routier},
      title = {Contextualiser l'interaction entre agents en combinant dimensions sociale et physique au sein de l'environnement},
  booktitle = {Les 22\`emes Journ\'ees Francophones sur les Syst\`emes Multi-Agents},
       year = {2014},
  publisher = {C\'epadu\`es \'Editions},
      pages = {65--74},
       isbn = {978-2-36493-154-1},
     editor = {Courdier, R\'emy and Jamont, Jean-Paul},
    address = {Loriol-sur-Dr\^ome, France},
       note = {Best Paper Award},
   abstract = {L'environnement, en tant qu'espace partag\'e entre agents, est un \'el\'ement essentiel des syst\`emes multiagents. Selon les syst\`emes, cet espace int\`egre des dimensions diff\'erentes comme une dimension physique support \`a l'ancrage spatial et \`a l'activit\'e des agents sur cette dimension, ou une dimension sociale support aux communications entre agents. Ces dimensions sont souvent trait\'ees de mani\`ere ind\'ependante et ne sont reli\'ees qu'au sein de l'agent qui constitue alors le lieu de jonction et de combinaison des informations v\'ehicul\'ees dans ces diff\'erentes dimensions. Il s'av\`ere cependant que la combinaison entre ces dimensions est \`a consid\'erer \'egalement en dehors des agents, pour pouvoir par exemple, situer des communications. Dans cet article, nous proposons un mod\`ele unifi\'e supportant la combinaison des dimensions physiques et sociales pour la mise en {\oe}uvre d'interactions contextualis\'ees entre agents. Ce mod\`ele est d\'evelopp\'e avec le langage multiagent {SARL}. Nous illustrons cette proposition par une application de simulation de trafic routier dans la ville de Belfort.},
}

@INPROCEEDINGS{iat2014,
     author = {Rodriguez, Sebastian and Gaud, Nicolas and Galland, St\'ephane},
   keywords = {Agent Programming Languages, {SARL}},
      title = {{SARL:} a general-purpose agent-oriented programming language},
  booktitle = {the 2014 IEEE/WIC/ACM International Conference on Intelligent Agent Technology},
       year = {2014},
  publisher = {{IEEE} Computer Society Press},
    address = {Warsaw, Poland},
   abstract = {Complex software systems development require appropriate high-level features to better and easily tackle the new requirements in terms of interactions, concurrency and distribution. This requires a paradigm change in software engineering and corresponding programming languages. We are convinced that agent-oriented programming may be the support for this change by focusing on a small corpus of commonly accepted concepts and the corresponding programming language in line with the current developers' programming practices. This papers introduces {SARL}, a new general-purpose agent-oriented programming language undertaking this challenge. {SARL} comes with its full support in the Eclipse {IDE} for compilation and debugging, and a new version 2.0 of the Janus platform for execution purposes. The main perspective that guided the creation of {SARL} is the establishment of an open and easily extensible language. Our expectation is to provide the community with a common forum in terms of a first working testbed to study and compare various programming alternatives and associated metamodels.},
}

